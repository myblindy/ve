<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	var fields = new (string type, string alloc, string free, bool ptrfree, bool extrareleaselogic)[] 
	{ 
		("AVPacket", "ffmpeg.av_packet_alloc", "ffmpeg.av_packet_free", true, false), 
		("AVFrame", "ffmpeg.av_frame_alloc", "ffmpeg.av_frame_free", true, false), 
		("AVFormatContext", null, "ffmpeg.avformat_free_context", false, false), 
		("AVBufferSinkParams", "ffmpeg.av_buffersink_params_alloc", "ffmpeg.av_free", false, true), 
	};
#>

using FFmpeg.AutoGen;
using System;
using System.Runtime.ConstrainedExecution;
using System.Runtime.InteropServices;

#pragma warning disable CA1801
#pragma warning disable IDE0060

<# foreach(var field in fields) { #>
internal partial class Safe<#= field.type #> : SafeHandle
{
<# if(string.IsNullOrWhiteSpace(field.alloc)) { #>
	public Safe<#= field.type #>(IntPtr handle): base(IntPtr.Zero, true) =>
		SetHandle(handle);

    public unsafe delegate void InitDelegate(<#= field.type #> **ptr);

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	public unsafe Safe<#= field.type #>(InitDelegate init): base(IntPtr.Zero, true)
	{
		<#= field.type #> *ptr = default;
		init(&ptr);
		SetHandle(new IntPtr(ptr));
	}
<# } else { #>
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	public unsafe Safe<#= field.type #>(): base(IntPtr.Zero, true) => SetHandle(new IntPtr(<#= field.alloc #>()));
<# } #>

    public override bool IsInvalid => handle == IntPtr.Zero;

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	unsafe protected override bool ReleaseHandle()
	{
		var ptr = (<#= field.type #> *)handle.ToPointer();
<# if(field.extrareleaselogic) { #>
		ExtraReleaseHandleLogic(ptr);
<# } #>
		<#= field.free #>(<#= field.ptrfree ? "&" : "" #>ptr);
		SetHandle(IntPtr.Zero);
		return true;
	}

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1720:Identifier contains type name", Justification = "Descriptive name, leave alone")]
	unsafe public <#= field.type #> *Pointer 
	{
		[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
		get { return (<#= field.type #> *)handle; }
	}
}

<# } #>

// AVBufferSinkParams pixel format helper
internal partial class SafeAVBufferSinkParams
{
	private bool MyPixelFormatChange = false;

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	public unsafe void ClearPixelFormats()
	{
		if(MyPixelFormatChange && Pointer->pixel_fmts != null)
		{
			ffmpeg.av_free(Pointer->pixel_fmts);
			Pointer->pixel_fmts = null;
		}
	}

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	public unsafe void SetPixelFormats(params AVPixelFormat[] formats)
	{
		ClearPixelFormats();

		var inbuffersize = formats.Length * sizeof(AVPixelFormat);
		var outbuffersize = inbuffersize + sizeof(AVPixelFormat);
		var sinkPixelFormats = (byte*)ffmpeg.av_malloc((ulong)outbuffersize);
		fixed (void* pformats = formats)
		    Buffer.MemoryCopy(pformats, sinkPixelFormats, outbuffersize, inbuffersize);
		Marshal.WriteInt32(new IntPtr(sinkPixelFormats + inbuffersize), (int)AVPixelFormat.AV_PIX_FMT_NONE);

		Pointer->pixel_fmts = (AVPixelFormat *)sinkPixelFormats;

		MyPixelFormatChange = true;
	}

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	protected unsafe void ExtraReleaseHandleLogic(AVBufferSinkParams *ptr) => ClearPixelFormats();
}

// avdict safe wrapper
internal class SafeAVDictionary : SafeHandle
{
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    unsafe public SafeAVDictionary() : base(IntPtr.Zero, true)
    {
		AVDictionary *dict;

		// work around to allocate this thing
		ffmpeg.av_dict_set(&dict, "key", "val", 0);
		ffmpeg.av_dict_get(dict, "", null, ffmpeg.AV_DICT_IGNORE_SUFFIX);

		SetHandle(new IntPtr(dict));
    }

    public override bool IsInvalid => handle == IntPtr.Zero;

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1720:Identifier contains type name", Justification = "Descriptive name, leave alone")]
	unsafe public AVDictionary *Pointer 
	{
		[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
		get { return (AVDictionary *)handle; }
	}

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	unsafe protected override bool ReleaseHandle()
	{
		var dict = (AVDictionary *)handle.ToPointer();

		// remove any values still in
		AVDictionaryEntry *t = default;
		while((t = ffmpeg.av_dict_get(dict, "", t, ffmpeg.AV_DICT_IGNORE_SUFFIX)) != null)
		{
		}

		ffmpeg.av_dict_free(&dict);
		SetHandle(IntPtr.Zero);

		return true;
	}

    unsafe public delegate void UpdateDelegate(AVDictionary** dict);

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    unsafe public void Update(UpdateDelegate upd)
    {
        var dict = (AVDictionary*)handle;
        upd(&dict);
        SetHandle(new IntPtr(dict));
    }

	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    unsafe public void Set(string key, string val, int flags = 0)
    {
        var dict = (AVDictionary*)handle;
        ffmpeg.av_dict_set(&dict, key, val, flags);
        SetHandle(new IntPtr(dict));
    }
}
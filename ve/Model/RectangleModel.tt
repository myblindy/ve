<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#@ include file="modelbasetemplate.tt" #>

<# Generate("RectangleModel",  null,
	F("int", "X"),
	F("int", "Y"),
	F("int", "Width"),
	F("int", "Height"));  #>

namespace ve.Model
{
	public partial class RectangleModel: IKeyFrameInterpolation<RectangleModel>
	{
		public RectangleModel InterpolateWith(RectangleModel other, double ratio) =>
			new RectangleModel
			{
				X = (int)((1 - ratio) * X + ratio * other.X),
				Y = (int)((1 - ratio) * Y + ratio * other.Y),
				Height = (int)((1 - ratio) * Height + ratio * other.Height),
				Width = (int)((1 - ratio) * Width + ratio * other.Width),
			};


        public override bool Equals(object obj) => obj is RectangleModel model && X == model.X && Y == model.Y && Width == model.Width && Height == model.Height;
        public override int GetHashCode() => HashCode.Combine(X, Y, Width, Height);

        public RectangleModel() {}
		public RectangleModel(int x, int y, int w, int h) { X = x; Y = y; Width = w; Height = h; }

        public static bool operator ==(RectangleModel left, RectangleModel right) => EqualityComparer<RectangleModel>.Default.Equals(left, right);
        public static bool operator !=(RectangleModel left, RectangleModel right) => !(left == right);
	}
}